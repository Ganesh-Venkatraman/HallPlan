name: CodeQL Security Scan

on:
  push:
    branches: [ "main" ]
    paths-ignore: &paths_ignore
      - '**/*.py'
      - '**/*.html'
      - '**/*.css'
      - '**/*.js'
      - '**/*.yml'
      - '**/*.yaml'

  pull_request:
    branches: [ "main" ]
    paths-ignore: *paths_ignore

  schedule:
    - cron: '0 0 * * 0'

concurrency:
  group: codeql-scan-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  packages: read
  security-events: write

jobs:
  analyze:
    name: Analyze â€” ${{ matrix.language }}
    runs-on: ubuntu-latest

    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: actions
            build-mode: none
          - language: python
            build-mode: none
          - language: javascript-typescript
            build-mode: none

    steps:
      - name: Checkout repository (with submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python (optional helper for some CodeQL builds)
        if: matrix.language == 'python' || matrix.language == 'javascript-typescript'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}
      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: ${{ matrix.language }}

      - name: Check for Timetable requirements (diagnostic, non-failing)
        if: always()
        shell: bash
        run: |
          if grep -q "^-r Timetable/requirements.txt" requirements.txt 2>/dev/null; then
            if [ ! -f Timetable/requirements.txt ]; then
              echo "##[warning] requirements.txt references Timetable/requirements.txt but file not found in repo."
              echo "If Timetable is a submodule, ensure checkout step includes 'submodules: true' (this workflow does)."
              echo "If Timetable is not a submodule, either add Timetable/requirements.txt or remove the -r line."
            else
              echo "Timetable/requirements.txt is present."
            fi
          else
            echo "No reference to Timetable/requirements.txt detected in requirements.txt."
          fi

      - name: Validate Python dependencies (safe check)
        shell: bash
        run: |
          # Check if Timetable/requirements.txt exists before running pip-compile
          if [ -f Timetable/requirements.txt ]; then
            pip-compile --dry-run -o requirements.out requirements.txt
          else
            echo "::warning:: Timetable/requirements.txt not found. Skipping dependency validation."
          fi

      - name: Python validate no broken dependencies
        if: success()
        run: |
          if pip-compile --dry-run -o requirements.out requirements.txt; then
            echo "::debug::Python validate no broken dependencies"
            echo "{valid-project}={true}" >> "$GITHUB_OUTPUT"
          else
            echo "{valid-project}={false}" >> "$GITHUB_OUTPUT"
            echo "### :warning: Python validation failed in repository root" >> $GITHUB_STEP_SUMMARY
            echo "We were unable to validate a Python project in the repository root. If your repository requires additional setup steps, you may need to check in your own workflow." >> $GITHUB_STEP_SUMMARY
            echo "For more information on submitting Python dependencies from your own workflow, refer to [the submission action](https://github.com/actions/component-detection-dependency-submission-action)" >> $GITHUB_STEP_SUMMARY
            echo "::warning::Python validation failed in the repository root."
            exit 1
          fi

